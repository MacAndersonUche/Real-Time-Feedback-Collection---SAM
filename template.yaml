AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Real time feedback collection 

  Sample SAM Template for Real time feedback collection

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Tracing: Active
  Api:
    TracingEnabled: true

Resources:
  FeedbackApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors:
        AllowMethods: "'GET,POST,OPTIONS,PUT'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  SubmitFeedbackFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: nodejs16.x
    Properties:
      FunctionName: submitfeedbackfunction
      Handler: dist/submitfeed/app.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Events:
        Submit:
          Type: Api
          Properties:
            Path: /submit
            Method: POST
            RestApiId: !Ref FeedbackApi
      Environment:
        Variables:
          TABLE_NAME: !Ref FeedbackTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FeedbackTable

  NotifyAdminsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: nodejs16.x
    Properties:
      FunctionName: notifyadminsfunction
      Handler: dist/notifyadmins/app.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt FeedbackTable.StreamArn
            BatchSize: 1
            StartingPosition: LATEST
      Environment:
        Variables:
          TABLE_NAME: !Ref FeedbackTable
          TOPIC_ARN: !Ref FeedbackNotifications
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FeedbackTable
        - DynamoDBStreamReadPolicy:
            StreamName: "*"
            TableName: !Ref FeedbackTable
        - SNSPublishMessagePolicy:
            TopicName: "real-time-feedback-collection-FeedbackNotifications-6fMF8vFhWqG5"

  EmailIdentity:
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: macandy99@gmail.com

  ProcessFeedbackFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: nodejs16.x
    Properties:
      FunctionName: processfeedbackfunction
      Handler: dist/processfeed/app.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Events:
        PollMessage:
          Type: SQS
          Properties:
            Queue: !GetAtt FeedbackQueue.Arn
            BatchSize: 1
      Environment:
        Variables:
          TABLE_NAME: !Ref FeedbackTable
          EVENTS_TABLE_NAME: !Ref FeedbackEventsTable
          TOPIC_ARN: !Ref FeedbackNotifications
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FeedbackTable
        - DynamoDBCrudPolicy:
            TableName: !Ref FeedbackEventsTable
        - SQSPollerPolicy:
            QueueName: !Ref FeedbackQueue
        - SESCrudPolicy:
            IdentityName: "*"

  FeedbackNotifications:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: FeedbackNotificationsTopic

  FeedbackQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: FeedbackQueue
      MessageRetentionPeriod: 70
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt FeedbackDLQQueue.Arn
        maxReceiveCount: 2
      VisibilityTimeout: 60

  FeedbackDLQQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: FeedbackQueueDLQ

  SNSToSQSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn: !Ref FeedbackNotifications
      Endpoint: !GetAtt FeedbackQueue.Arn

  SNSToSQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - "sqs:SendMessage"
              - "sqs:SendMessageBatch"
            Resource: !GetAtt FeedbackQueue.Arn
      Queues:
        - !Ref FeedbackQueue

  # Define the publisher Lambda function with permissions
  PublishToEventFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: publisheventfunction
      Handler: dist/publishevent/app.lambdaHandler
      Runtime: nodejs16.x
      Description: A Lambda function that forward changes on DynamoDB table to EventBridge bus.
      MemorySize: 128
      Timeout: 3
      Events:
        TableRecordChange:
          Type: DynamoDB
          Properties:
            StartingPosition: LATEST
            Stream: !GetAtt FeedbackEventsTable.StreamArn
      Environment:
        Variables:
          EVENT_BUS_NAME: !GetAtt FeedbackEventBus.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Resource: "*"
              Action:
                - events:PutEvents

  #Define the Lambda subscribers for updates from table
  SubscribeInsertFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: subscribeeventfunction
      Handler: dist/subscribe/app.lambdaHandler
      Runtime: nodejs16.x
      Description: A Lambda function that receive update events from the table.

  #EventBridge specification
  FeedbackEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: FeedbackEventBus

  #EventBridge rules and permissions
  FeedbackEventRuleInsert:
    Type: AWS::Events::Rule
    Properties:
      Description: "update transactions"
      EventBusName: !GetAtt FeedbackEventBus.Arn
      EventPattern:
        source:
          - "FeedbackEventsTable"
        detail-type:
          - transaction
        detail:
          eventName:
            - "INSERT"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt SubscribeInsertFunction.Arn
          Id: "eventRuleInsert"
  PermissionForInsertEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SubscribeInsertFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt FeedbackEventRuleInsert.Arn

  FeedbackTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "submit-feedback"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      DeletionProtectionEnabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  FeedbackEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "submit-feedback-events"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      DeletionProtectionEnabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"
Outputs:
  HelloWorldApi:
    Description: "API Gateway endpoint URL for dev for real time feedback"
    Value: !Sub "https://${FeedbackApi}.execute-api.${AWS::Region}.amazonaws.com/dev/"
